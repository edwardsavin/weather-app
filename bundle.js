(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\n* {\n  margin: 0;\n  padding: 0;\n  font: inherit;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role="list"],\nol[role="list"] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\n/* Set core body defaults */\nbody {\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don\'t have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture,\nsvg {\n  max-width: 100%;\n  display: block;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,qBAAqB;AACrB;;;EAGE,sBAAsB;AACxB;;AAEA,0BAA0B;AAC1B;EACE,SAAS;EACT,UAAU;EACV,aAAa;AACf;;AAEA,2GAA2G;AAC3G;;EAEE,gBAAgB;AAClB;;AAEA,2BAA2B;AAC3B;EACE,uBAAuB;AACzB;;AAEA;;EAEE,YAAY;AACd;;AAEA,2BAA2B;AAC3B;EACE,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA,0DAA0D;AAC1D;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;AACpC;;;EAGE,eAAe;EACf,cAAc;AAChB;;AAEA,gGAAgG;AAChG;EACE;IACE,qBAAqB;EACvB;;EAEA;;;IAGE,qCAAqC;IACrC,uCAAuC;IACvC,sCAAsC;IACtC,gCAAgC;EAClC;AACF",sourcesContent:['/* Box sizing rules */\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\n/* Remove default margin */\n* {\n  margin: 0;\n  padding: 0;\n  font: inherit;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role="list"],\nol[role="list"] {\n  list-style: none;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\nhtml,\nbody {\n  height: 100%;\n}\n\n/* Set core body defaults */\nbody {\n  text-rendering: optimizeSpeed;\n  line-height: 1.5;\n}\n\n/* A elements that don\'t have a class get default styles */\na:not([class]) {\n  text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture,\nsvg {\n  max-width: 100%;\n  display: block;\n}\n\n/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n  html:focus-within {\n    scroll-behavior: auto;\n  }\n\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n    scroll-behavior: auto !important;\n  }\n}\n'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],u=r.base?s[0]+r.base:s[0],l=a[u]||0,d="".concat(u," ").concat(l);a[u]=l+1;var p=n(d),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var m=o(h,r);r.byIndex=c,t.splice(c,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=r(e,o),u=0;u<a.length;u++){var l=n(a[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),i=n.n(a),c=n(565),s=n.n(c),u=n(216),l=n.n(u),d=n(589),p=n.n(d),h=n(426),m={};m.styleTagTransform=p(),m.setAttributes=s(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=l(),t()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var f=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{s(r.next(e))}catch(e){a(e)}}function c(e){try{s(r.throw(e))}catch(e){a(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}s((r=r.apply(e,t||[])).next())}))},A=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};function v(e){return f(this,void 0,void 0,(function(){var t;return A(this,(function(n){switch(n.label){case 0:return[4,fetch("https://api.openweathermap.org/data/2.5/weather?q=".concat(e,"&APPID=1aaa95c01bd86f296f84339c8c5057fa&units=metric"),{mode:"cors"})];case 1:return[4,n.sent().json()];case 2:return[2,{location:(t=n.sent()).name,country:t.sys.country,description:t.weather[0].description,icon:t.weather[0].icon,temperature:t.main.temp,feelsLike:t.main.feels_like,humidity:t.main.humidity,windSpeed:t.wind.speed}]}}))}))}function y(e){return f(this,void 0,void 0,(function(){var t;return A(this,(function(n){switch(n.label){case 0:return[4,fetch("https://api.openweathermap.org/data/2.5/weather?q=".concat(e,"&APPID=1aaa95c01bd86f296f84339c8c5057fa&units=imperial"),{mode:"cors"})];case 1:return[4,n.sent().json()];case 2:return[2,{location:(t=n.sent()).name,country:t.sys.country,description:t.weather[0].description,icon:t.weather[0].icon,temperature:t.main.temp,feelsLike:t.main.feels_like,humidity:t.main.humidity,windSpeed:t.wind.speed}]}}))}))}const b=function(e){return f(this,void 0,void 0,(function(){var t,n,r;return A(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),[4,v(e)];case 1:return t=o.sent(),[4,y(e)];case 2:return n=o.sent(),[2,{metricTemperature:t,imperialTemperature:n}];case 3:throw r=o.sent(),a=document.querySelector(".search-bar-container"),(i=document.createElement("div")).classList.add("search-error"),i.textContent="Cannot find this location. To make search more precise, please put the city's name, comma, 2-letter country code (ISO3166).",a.appendChild(i),new Error(r);case 4:return[2]}var a,i}))}))};var C,w,g,E,x,S,k;function B(e,t,n,r,o,a,i){var c=document.querySelector(".weather-temperature"),s=document.querySelector(".weather-feels-like"),u=document.querySelector(".weather-humidity"),l=document.querySelector(".weather-wind-speed"),d=document.querySelector(".unit-switcher").getAttribute("data-unit");C=e,w=t,g=n,E=r,x=o,S=a,k=i,"metric"===d?(c.textContent="".concat(e," °C"),s.textContent="Feels Like: ".concat(n," °C"),u.textContent="Humidity: ".concat(o," %"),l.textContent="Wind Speed: ".concat(a," m/s")):(c.textContent="".concat(t," °F"),s.textContent="Feels Like: ".concat(r," °F"),l.textContent="Wind Speed: ".concat(i," mph"))}function L(){var e=document.querySelector(".unit-switcher").getAttribute("data-unit");return B(C,w,g,E,x,S,k),e}var q="London";function M(e,t,n,r,o,a,i,c){var s=document.querySelector(".search-results-container"),u=function(e){var t=document.createElement("div");return t.classList.add("weather-location"),t.textContent=e,t}(e),l=function(e){var t=document.createElement("div");t.classList.add("weather-country");var n,r=(n=e.toUpperCase().split("").map((function(e){return 127397+e.charCodeAt(0)})),String.fromCodePoint.apply(String,n));return t.textContent=r,t}(t),d=function(e){var t=document.createElement("div");return t.classList.add("weather-description"),t.textContent=e,t}(n),p=function(e){var t=document.createElement("div");t.classList.add("weather-icon-container");var n=document.createElement("img");return n.classList.add("weather-icon"),n.src="https://openweathermap.org/img/wn/".concat(e,".png"),t.append(n),t}(r),h=function(e){var t=document.createElement("div");return t.classList.add("weather-temperature"),t.textContent="".concat(e," °C"),t}(o),m=function(e){var t=document.createElement("div");return t.classList.add("weather-feels-like"),t.textContent="Feels like: ".concat(e," °C"),t}(a),f=function(e){var t=document.createElement("div");return t.classList.add("weather-humidity"),t.textContent="Humidity: ".concat(e," %"),t}(i),A=function(e){var t=document.createElement("div");return t.classList.add("weather-wind-speed"),t.textContent="Wind Speed: ".concat(e," km/h"),t}(c);s.append(l,u,d,p,h,m,f,A)}function T(){document.querySelector(".search-results-container").innerHTML=""}function I(e){q=e}function j(e){return t=this,n=void 0,o=function(){var t,n,r,o,a,i,c,s,u,l,d,p,h,m,f,A,v;return function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}(this,(function(y){switch(y.label){case 0:return y.trys.push([0,2,,4]),[4,b(e)];case 1:return n=y.sent(),t=n,I(e),[3,4];case 2:return y.sent(),[4,b(q)];case 3:return r=y.sent(),t=r,I(q),[3,4];case 4:return o=Object(t),a=Object(o.metricTemperature),i=Object(o.imperialTemperature),c=a.location,s=a.country,u=a.description,l=a.icon,d=Math.round(a.temperature),p=Math.round(a.feelsLike),h=Math.round(a.humidity),m=Math.round(a.windSpeed),f=Math.round(i.temperature),A=Math.round(i.feelsLike),v=Math.round(i.windSpeed),M(c,s,u,l,d,p,h,m),B(d,f,p,A,h,m,v),[2]}}))},new((r=void 0)||(r=Promise))((function(e,a){function i(e){try{s(o.next(e))}catch(e){a(e)}}function c(e){try{s(o.throw(e))}catch(e){a(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,c)}s((o=o.apply(t,n||[])).next())}));var t,n,r,o}var G,P,R,F;j("London"),G=document.getElementById("main"),P=function(){var e=document.createElement("div");e.classList.add("search-bar-container");var t,n=((t=document.createElement("input")).classList.add("search-input"),t.setAttribute("type","text"),t.setAttribute("placeholder","Search a location..."),t),r=function(){var e=document.createElement("button");return e.classList.add("search-button"),e.setAttribute("type","submit"),e.textContent="Search",e}();return n.addEventListener("keyup",(function(e){var t;"Enter"===e.key&&((t=document.querySelector(".search-error"))&&t.remove(),T(),j(n.value))})),r.addEventListener("click",(function(){T(),j(n.value)})),e.appendChild(n),e.appendChild(r),e}(),R=function(){var e=document.createElement("div");return e.classList.add("search-results-container"),e}(),F=function(){var e=document.createElement("div"),t=document.createElement("button");return t.classList.add("unit-switcher"),t.dataset.unit="metric",t.textContent="Show Fahrenheit",t.addEventListener("click",(function(){"metric"===t.dataset.unit?(t.dataset.unit="imperial",t.textContent="Show Celsius",L()):(t.dataset.unit="metric",t.textContent="Show Fahrenheit",L())})),e.appendChild(t),t}(),G.appendChild(P),G.appendChild(F),G.appendChild(R)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,